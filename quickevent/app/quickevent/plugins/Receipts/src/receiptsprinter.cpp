#include "receiptsprinter.h"
#include "receiptsplugin.h"
#include "receiptssettings.h"

#include <qf/core/collator.h>

#include <qf/gui/framework/mainwindow.h>
#include <qf/gui/reports/processor/reportpainter.h>
#include <qf/gui/reports/processor/reportprocessor.h>

#include <QCryptographicHash>
#include <QDomDocument>
#include <QPrinter>
#include <QPrinterInfo>
#include <QTcpSocket>
#include <QUdpSocket>
#include <QFile>
#if QT_VERSION_MAJOR >= 6
#include <QStringEncoder>
#else
#include <QTextCodec>
#endif

//#define QF_TIMESCOPE_ENABLED
#include <qf/core/utils/fileutils.h>
#include <qf/core/utils/timescope.h>

namespace qff = qf::gui::framework;
using Receipts::ReceiptsPlugin;

#if QT_VERSION < QT_VERSION_CHECK(5, 14, 0)
static const auto SkipEmptyParts = QString::SkipEmptyParts;
#else
static const auto SkipEmptyParts = Qt::SkipEmptyParts;
#endif

ReceiptsPrinter::ReceiptsPrinter(QObject *parent)
	: QObject(parent)
{
}

bool ReceiptsPrinter::printReceipt(const QString &report_file_name, const QVariantMap &report_data, int card_id)
{
	qfLogFuncFrame() << "card:" << card_id;
	if(report_file_name.isEmpty()) {
		qfError() << "Empty receipt path.";
		return false;
	}
	QF_TIME_SCOPE("ReceiptsPrinter::printReceipt()");
	ReceiptsSettings settings;
	QPrinter *printer = nullptr;
	QPaintDevice *paint_device = nullptr;
	if(settings.printerTypeEnum() == ReceiptsSettings::PrinterType::GraphicPrinter) {
		QF_TIME_SCOPE("init graphics printer");
		QPrinterInfo pi = QPrinterInfo::printerInfo(settings.graphicsPrinterName());
		if(pi.isNull()) {
			for(const auto &s : QPrinterInfo::availablePrinterNames()) {
				qfInfo() << "available printer:" << s;
			}
			pi = QPrinterInfo::defaultPrinter();
		}
		if(pi.isNull()) {
			qfWarning() << "Default printer not set";
			return false;
		}
		qfInfo() << "printing on:" << pi.printerName();
		printer = new QPrinter(pi);
		paint_device = printer;
	}
	else {
		qfInfo() << "printing on:" << settings.characterPrinterModel() << "at:"
				 << ((settings.characterPrinterTypeEnum() == ReceiptsSettings::CharacterPrinteType::Directory)?
						 settings.characterPrinterDirectory() :
						 settings.characterPrinterDevice());
		qff::MainWindow *fwk = qff::MainWindow::frameWork();
		paint_device = fwk;
	}
	qf::gui::reports::ReportProcessor rp(paint_device);
	{
		QF_TIME_SCOPE("setting report and data");
		auto *plugin = qf::gui::framework::getPlugin<Receipts::ReceiptsPlugin>();
		if(!rp.setReport(plugin->findReportFile(report_file_name)))
			return false;
		for(const auto &[key, val] : report_data.asKeyValueRange()) {
			rp.setTableData(key, val);
		}
	}
	if(settings.printerTypeEnum() == ReceiptsSettings::PrinterType::GraphicPrinter) {
		QF_TIME_SCOPE("process graphics");
		{
			QF_TIME_SCOPE("process report");
			rp.process();
		}
		qf::gui::reports::ReportItemMetaPaintReport *doc;
		{
			QF_TIME_SCOPE("getting processor output");
			doc = rp.processorOutput();
		}
		qf::gui::reports::ReportItemMetaPaint *it = doc->child(0);
		if(it) {
			QF_TIME_SCOPE("draw meta-paint");
			qf::gui::reports::ReportPainter painter(paint_device);
			painter.drawMetaPaint(it);
		}
		QF_SAFE_DELETE(printer);
		return true;
	}
	if(settings.printerTypeEnum() == ReceiptsSettings::PrinterType::CharacterPrinter) {
		QDomDocument doc;
		doc.setContent(QLatin1String("<?xml version=\"1.0\"?><report><body/></report>"));
		QDomElement el_body = doc.documentElement().firstChildElement("body");
		qf::gui::reports::ReportProcessor::HtmlExportOptions opts;
		opts.setConvertBandsToTables(false);
		rp.processHtml(el_body, opts);
		//qfInfo() << doc.toString();
		QList<QByteArray> data_lines = createPrinterData(el_body, settings);
		auto save_file = [data_lines](const QString &fn) {
			QFile f(fn);
			if(f.open(QFile::WriteOnly)) {
				//qfInfo() << "writing receipt data to:" << fn;
				for(const auto &ba : data_lines) {
					f.write(ba);
					f.write("\n");
				}
				return true;
			}
			qfError() << "Cannot open file" << f.fileName() << "for writing!";
			return false;
		};
		switch(settings.characterPrinterTypeEnum()) {
			case ReceiptsSettings::CharacterPrinteType::Directory: {
				if(!settings.characterPrinterDirectory().isEmpty()) {
					QString fn = settings.characterPrinterDirectory();
					qf::core::utils::FileUtils::ensurePath(fn);
					QCryptographicHash ch(QCryptographicHash::Sha1);
					for(const auto &ba : data_lines)
						ch.addData(ba);
					fn += '/' + QString::number(card_id) + '-'
							+ QString::fromLatin1(ch.result().toHex().mid(0, 8)) + ".txt";
					return save_file(fn);
				}
				return false;
			}
			case ReceiptsSettings::CharacterPrinteType::LPT: {
				if (!settings.characterPrinterDevice().isEmpty()) {
					return save_file(settings.characterPrinterDevice());
				}
				return false;
			}
			case ReceiptsSettings::CharacterPrinteType::Network: {
				if (!settings.characterPrinterUrl().isEmpty()) {
					QString host = settings.characterPrinterUrl().section(':', 0, 0);
					QHostAddress host_addr(host);
					int port = settings.characterPrinterUrl().section(':', 1, 1).toInt();
					if(settings.isCharacterPrinterUdpProtocol()) {
						QByteArray dgram;
						for(const QByteArray& line : data_lines) {
							dgram += line;
							dgram += '\n';
						}
						// v Racomu chteli pridat 2 radky, aby jim to vyjelo vic,
						// spravne by to asi resil custom footer u vycetky
						dgram += "\n\n\n";
						QUdpSocket socket;
						socket.writeDatagram(dgram, host_addr, port);
						return true;
					}
					{
						QTcpSocket socket;
						socket.connectToHost(host_addr, port, QIODevice::WriteOnly);
						if (socket.waitForConnected(1000)) {
							for(const QByteArray& line : data_lines) {
								socket.write(line);
								socket.write("\n");
							}
							socket.disconnectFromHost();
							if (!socket.waitForDisconnected(1000)) { // waiting till all data are sent
								qfError() << "Error while closing the connection to printer: "
										<< socket.error();
								return false;
							}
							return true;
						}
						qfError() << "Cannot open tcp connection to address "
								<< host << " on port " << port
								<< " reason: " << socket.error();
						return false;
					}
				}
				return false;
			}
		}
	}
	qfError() << "Unknow printer type";
	return false;
}

const QByteArray zelesta_logo(
"\x1d\x76\x30\x00\x1e\x00\x73\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1d\x80\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x37\x40\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x5d\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x77\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\xdd\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xf7"
"\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x5f\xd8\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xf5\x74\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x06\xbf\xdc\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x07\xeb\x76\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x0d\x7e\xfd\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x1f\xd7\xaf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x15\x7d\xf5\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x01\x44\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\xd7"
"\x5f\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x11"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x75\xbd\xf6\xc0"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x40\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbf\x77\x7d\xe0\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x14\x51\x10\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\xeb\xdd\xd7\x60\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x40\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x01\xbe\xf7\x7d\xf0\x00\x00\x00\x00\x2a\xaa"
"\xaa\xaa\xaa\xaa\xaa\xb0\x28\x51\x08\x2a\xaa\xaa\xaa\xaa\xaa\x80"
"\x00\x00\x00\x02\xeb\xbf\xd7\xb8\x00\x00\x00\x05\xff\xff\xff\xff"
"\xff\xff\xff\xe0\x02\x04\x40\x3f\xff\xff\xff\xff\xff\xc0\x00\x00"
"\x00\x00\x16\xea\xf8\x00\x00\x00\x00\x3f\xa9\x55\x55\x55\x55\x55"
"\x55\x30\x51\x50\x20\x2a\xaa\xaa\xaa\xaa\xaa\x00\x00\x00\x00\x00"
"\x03\xbf\x5c\x00\x00\x00\x00\xea\x00\x00\x00\x00\x00\x00\x00\x00"
"\x08\x05\x14\x00\x00\x00\x00\x00\x00\x01\x8f\x87\x87\xc0\x06\xeb"
"\xf6\x00\x00\x00\x07\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x42\x90"
"\x80\x00\x00\x00\x00\x00\x00\x02\x9b\x4e\xce\xc0\x0f\xbe\xbd\x00"
"\x00\x00\x0d\x40\x09\x10\x84\x21\x08\x42\x11\x20\x28\x22\x20\x11"
"\x08\x42\x10\x84\x20\x07\x98\xc8\xc8\xa0\x1a\xed\xee\x00\x00\x00"
"\x3a\x02\xff\xff\xff\xff\xff\xff\xff\xe0\x82\x88\x88\x3f\xff\xff"
"\xff\xff\xfc\x05\x18\xcd\x8c\xc0\x3f\xbf\xbb\x80\x00\x00\x68\x0f"
"\xb5\x6e\xb6\xdd\x6d\xba\xd6\xb0\x10\x22\x20\x36\xeb\x6d\xd6\xdb"
"\xa8\x0d\x9b\x4e\x8f\x80\x2a\xea\xee\x80\x00\x01\xe0\x7a\xc0\x80"
"\x00\x00\x00\x00\x08\x00\x45\x08\x88\x00\x00\x00\x00\x00\x00\x03"
"\x1d\xd1\x94\xc0\x7f\xbf\xbb\xc0\x00\x03\x41\xba\x00\x00\x00\x00"
"\x00\x00\x00\x00\x10\x42\x20\x00\x00\x00\x00\x00\x00\x01\x02\x98"
"\xd8\x80\x55\xf6\xee\xe0\x00\x06\x86\xc0\x00\x00\x00\x00\x00\x00"
"\x00\x00\x05\x10\x80\x00\x00\x00\x00\x00\x00\x03\x13\x99\x98\xc0"
"\xff\x5d\xfb\xa0\x00\x0e\x0b\x80\x3f\xff\xff\xff\xff\xff\xff\xf8"
"\x10\x44\x00\xff\xff\xff\xff\xff\xe0\x03\x3d\x1e\x9f\x81\xdb\xf7"
"\x5e\xf0\x00\x18\x1e\x03\xd6\xdb\x7f\x77\xff\x77\xed\xfc\x04\x11"
"\x40\xde\xdf\xfb\xbf\xee\xc0\x03\x0e\x0b\x06\x83\x76\xbd\xeb\xb8"
"\x00\x38\x74\x1e\xf5\x24\x80\x90\x00\x88\x12\x04\x01\x44\x01\x21"
"\x50\x04\x40\x12\x00\x00\x00\x00\x00\x01\x4a\xa5\x2a\xa0\x00\x60"
"\xb0\x36\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb1\xc0\xf0"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\xc3\xa0\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x01\x83\x05\x80\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x03\x8f\x0e\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x02\x8a\x1a\x00\x00\x15\x40\x01\x29\x24\x92\x48"
"\x80\x20\x24\x44\x01\x24\x92\x48\x00\x24\x90\x08\x92\x24\x40\x00"
"\x00\x00\x07\x14\x34\x00\x01\xff\xb4\x03\xf7\xff\xff\xbf\xe0\xfc"
"\x1f\xff\xff\xff\xff\xf0\x01\xff\xff\xff\xff\xff\xf8\x3f\x80\x00"
"\x04\x1c\x58\x00\x06\xaa\xfc\x01\x5e\xaa\xaa\xf6\xa1\xb4\x1b\x5b"
"\xfd\x55\x55\x50\x07\x56\xaf\xeb\x55\xab\x50\x2f\x00\x00\x0e\x30"
"\x60\x00\x1f\xff\xb7\x03\xf7\xff\xff\xdd\xc1\xde\x0f\xf6\xaf\xff"
"\xff\xe0\x1d\xfd\xfa\xbe\xff\x7e\xf0\x3b\x80\x00\x08\x30\xe0\x00"
"\x75\x6b\xdd\x81\x6d\x6d\xb6\xf7\x81\x7a\x0d\x5f\xf5\xb6\xdb\x40"
"\x77\x6f\x6f\xef\xb5\xeb\xd0\x6e\x80\x00\x1c\x71\x80\x00\xbf\xde"
"\xf7\x03\xdf\xde\xef\x5d\x83\xde\x07\xf5\x5f\x7b\xbd\xc0\x5d\xdb"
"\xda\xba\xff\x7e\xe0\x7b\xc0\x00\x14\x61\xc0\x01\xd5\x7b\x5d\xc1"
"\x75\x77\xbb\xf7\x02\xf7\x0a\xbf\xfb\xde\xef\x01\xf7\x7d\x7f\xef"
"\xab\xd7\x40\xae\xc0\x00\x18\xc3\x00\x00\x7f\xdf\xf7\xc3\xdf\xdd"
"\xee\xbd\x87\xbb\x07\xeb\x6e\xeb\xbb\x01\x5d\xef\xd5\xba\xfe\xfd"
"\xc0\xfb\xe0\x00\x30\xe3\x00\x00\x55\xe9\x5d\x41\x7b\x77\x7b\xef"
"\x05\xdd\x82\xde\xfb\xbe\xed\x07\xf7\xbb\x7f\x7f\xb7\x57\x40\xde"
"\xa0\x00\x30\x86\x00\x00\x3f\x00\x77\xc3\xdc\x00\x00\x00\x06\xef"
"\x00\x00\x00\x00\x00\x02\xde\xc0\x00\x01\xdd\x00\x01\xf7\xe0\x00"
"\x31\xc7\x00\x00\x0a\x00\x3d\xe1\x76\x00\x00\x00\x0f\x7b\x80\x00"
"\x00\x00\x00\x0f\xbb\x00\x00\x01\x77\x00\x01\x5d\x70\x00\x31\x84"
"\x00\x00\x04\x00\x17\x43\xde\x00\x00\x00\x0b\xdd\xc0\x00\x00\x00"
"\x00\x0a\xec\x00\x00\x01\xdd\x00\x03\xf7\xd0\x00\x51\x8e\x00\x00"
"\x00\x00\x3d\xc1\x76\x00\x00\x00\x0e\xee\xc0\x00\x00\x00\x00\x0f"
"\xb8\x00\x00\x01\x77\x00\x02\xbd\x78\x00\x61\x8a\x00\x00\x00\x00"
"\x37\x43\xdd\x00\x00\x00\x1b\x77\xa0\x00\x00\x00\x00\x1d\xe8\x00"
"\x00\x01\xdd\x00\x03\xef\xd8\x00\x63\x0c\x00\x00\x00\x15\x7d\xc1"
"\x76\x00\x00\x00\x1f\xdd\xe0\x00\x00\x00\x00\x1b\x70\x00\x00\x01"
"\x7f\x00\x06\xba\xe8\x00\x51\x8c\x00\x00\x00\x3f\xd7\x43\xdf\xff"
"\xff\xf8\x35\x77\x60\xff\xff\xff\xfc\x2f\xd0\x00\x00\x01\xea\x00"
"\x07\xef\xbc\x00\x63\x0c\x00\x00\x00\x15\x7d\x81\x7a\xb6\xd5\x50"
"\x3f\xdd\xb0\x5b\x55\x55\x6c\x1d\x60\x00\x00\x01\xbf\x00\x0d\xba"
"\xec\x00\x63\x14\x00\x00\x00\x1f\xd7\x03\xdf\xdd\xff\xf0\x56\xef"
"\xf0\x6e\xff\xff\xdc\x37\xe0\x00\x00\x01\xea\x00\x0e\xeb\xbe\x00"
"\x63\x0c\x00\x00\x00\x1a\xfc\x01\x75\x77\x56\xa0\x7d\x9a\xa8\x3b"
"\xdb\x6d\x74\x1d\x60\x00\x00\x01\x7f\x00\x17\xbb\xea\x00\x62\x98"
"\x00\x00\x00\x2f\xae\x03\xdf\xdd\xfd\xe0\x6f\xcf\xf8\x2f\x77\xbb"
"\xdc\x37\xc0\x00\x00\x01\xab\x00\x1a\xe1\x7e\x00\x43\x0c\x00\x00"
"\x00\x1d\xf7\x01\x75\x77\x57\xa0\xda\x8a\xd8\x1d\xdd\xef\x74\x3d"
"\xa0\x00\x00\x01\xfe\x00\x1f\xb1\xd7\x00\x63\x8c\x00\x00\x00\x37"
"\x5d\xc3\xdf\xdf\xfd\xc0\xff\x87\xb4\x17\x77\x7b\xdc\x17\xe0\x00"
"\x00\x01\x5b\x00\x2d\xe1\x7d\x00\x62\x8c\x00\x00\x00\x1d\xf7\x41"
"\x76\xf5\x5b\x41\xaa\x86\xfc\x1d\xdd\xae\xf4\x3d\x60\x00\x00\x01"
"\xf6\x00\x3b\x61\xd7\x80\x63\x0c\x00\x00\x00\x00\x3d\xe1\x49\x15"
"\x55\x41\xff\x05\xd6\x0b\xf5\x52\x14\x17\xd0\x00\x00\x01\x5f\x00"
"\x6f\xc0\xbd\x80\x61\x8c\x00\x00\x00\x00\x17\x60\x00\x00\x00\x02"
"\xab\x03\x7c\x0e\xb8\x00\x00\x1d\x70\x00\x00\x01\xf5\x00\x5d\x6a"
"\xf7\x40\x51\x8c\x00\x00\x00\x00\x1d\xd0\x00\x00\x00\x03\xfe\x03"
"\xd7\x07\xd8\x00\x00\x17\xd0\x00\x00\x01\xbf\x00\x77\xff\x5d\xc0"
"\x31\x86\x00\x00\x00\x00\x0f\x60\x00\x00\x00\x02\xd6\x01\x7e\x02"
"\xec\x00\x00\x0e\xf8\x00\x00\x01\xed\x00\xdd\x55\xf7\x40\x61\x86"
"\x00\x00\x18\x00\x15\xf0\x00\x00\x00\x07\xbc\x01\xeb\x07\x7a\x00"
"\x00\x0d\xbc\x00\x00\x01\x77\x00\xf7\xff\x7d\xe0\x31\x46\x00\x00"
"\x1e\x00\x1f\x50\x00\x00\x00\x05\xf4\x01\xbf\x83\xdc\x00\x00\x0f"
"\xd6\x00\x0e\x01\xbd\x01\x5e\xad\xd7\xa0\x30\xc3\x00\x00\x77\xd0"
"\x7b\xe0\x92\x48\x80\x4e\xbc\x00\xed\x81\x76\x84\x92\x05\x7f\x80"
"\x3d\x01\xd7\x01\xf7\xfb\x7d\xe0\x18\xe3\x00\x00\xbb\xef\xdd\x63"
"\xff\xff\xff\xf7\xe8\x00\xde\x81\xdf\x7f\xff\x03\xda\xf7\xef\x01"
"\x7d\x01\x5d\x6f\xd7\x70\x18\xa3\x80\x01\xde\xbd\xef\xc1\x55\x56"
"\xbf\x5d\x78\x00\xb7\xc1\x75\xf5\x5a\x82\xf7\xbd\x7b\xc1\xef\x03"
"\xf7\xda\xfd\xd0\x18\x61\x80\x01\x77\xef\x75\x63\xff\xfd\xeb\xf7"
"\xd8\x00\x7a\xc0\xdf\x5f\xf7\x81\xbd\xef\xdd\x61\xba\x02\xdd\x6f"
"\x57\x78\x0c\x70\xc0\x00\xda\xbb\xbf\xc1\x6a\xd7\xbe\xbd\x68\x00"
"\x6f\xa0\xf5\xf6\xdd\x80\xd7\x75\x6f\xc1\xef\x07\xb6\x00\x0f\xd8"
"\x0c\x30\xe0\x00\x3f\xed\xd6\x83\xdf\xbd\xeb\xef\xf0\x00\x3b\x60"
"\x7f\x7d\xf7\x40\x3d\xdf\xf5\x01\x7b\x05\xfc\x00\x0d\x74\x0e\x18"
"\x70\x00\x0a\xbe\xfd\x01\x7a\xf7\x7e\xba\xa0\x00\x3e\xe0\x55\xd7"
"\x5d\xe0\x2f\x75\x5f\x01\xae\x06\xac\x00\x0b\xdc\x06\x1c\x28\x00"
"\x07\xeb\xae\x03\xdf\xbd\xd7\xef\xe0\x00\x2b\xb0\x7f\x7d\xf7\xb0"
"\x0b\xdf\xf4\x01\xfb\x0f\xf8\x00\x07\x74\x03\x14\x38\x00\x00\xbe"
"\xf0\x01\x75\xef\x7d\x7a\xa0\x00\x1e\xf0\x2d\xd7\x5d\xe0\x02\xf6"
"\xa8\x01\x5e\x0a\xac\x00\x05\xde\x03\x0e\x0e\x00\x00\x01\x00\x00"
"\x00\x00\x00\x00\x00\x00\x37\xd0\x00\x00\x00\x00\x00\x1a\x80\x00"
"\x00\x00\x00\x00\x00\x00\x03\x87\x0d\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x1d\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\xc3\x83\xc0\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x37\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\xe1\xc1\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x7d\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\xa0\xa0\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x57\xe0"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x70"
"\x78\x2f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x7d\x40\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x34\x0f"
"\xfa\xb6\xaa\xab\x6b\x55\x40\x00\x00\xa0\xd7\xc0\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1a\x1e\x01\x7f\xef"
"\xff\xfe\xfe\xff\x80\x00\x02\x40\xbd\x40\x14\x04\x80\x84\x80\x08"
"\x44\x12\x12\x09\x01\x00\x00\x10\x00\x0e\x07\x80\x0a\xba\xaa\xab"
"\x55\xaa\x80\x00\x01\x00\xf7\x80\x6e\x0f\xe3\x8f\xe6\x19\xfe\x7f"
"\x3f\xcf\xc3\x9c\x70\xfc\x00\x05\x82\xe0\x00\x00\x00\x00\x00\x00"
"\x00\x00\x0d\x41\xbd\x80\x7b\x8a\xb1\x0d\x67\x19\x5a\x6b\x15\x8d"
"\x71\x08\x31\xae\x00\x03\xc1\x7c\x00\x00\x00\x00\x00\x00\x00\x00"
"\x12\x01\xef\x00\xc1\x8c\x51\x8c\x06\x8c\x30\x50\x38\x0c\x63\x9e"
"\x52\x80\x00\x00\xb0\x37\xd0\x00\x00\x00\x00\x40\x00\x00\x49\x01"
"\x75\x01\xc0\xc6\x31\x8c\x07\x98\x30\x60\x10\x14\x31\x0e\x33\x00"
"\x00\x00\x68\x0d\xff\xff\xff\xff\xff\xfe\x00\x00\x55\x03\xdf\x00"
"\x81\xcc\x19\x8f\xe5\x54\x28\x7f\x1f\x8c\x33\x95\xb3\x14\x00\x00"
"\x3e\x00\xaf\xff\xff\xff\xff\x6c\x00\x01\x49\x03\x76\x01\xc0\x8e"
"\x71\x8b\xe6\xe8\x30\x37\x3f\x8d\x61\x0d\xb3\x1e\x00\x00\x0b\x80"
"\x00\x00\x00\x00\x00\x02\x00\x05\x24\x07\xdd\x00\x80\xc5\xc1\x8c"
"\x06\x3c\x30\x60\x10\x1f\xc3\x98\xe3\x06\x00\x00\x03\x70\x00\x00"
"\x00\x00\x00\x00\x00\x04\xaa\x05\x76\x00\xe3\x8f\xe1\x8c\x05\x34"
"\x18\x50\x18\x0a\xc1\x0c\xb1\x86\x00\x00\x00\xee\x80\x00\x00\x00"
"\x00\x00\x00\x12\x92\x07\xdc\x00\x7a\x8a\x51\x8f\xe6\x18\x30\x7f"
"\x3f\xcc\xa3\x94\x61\xfa\x00\x00\x00\x1f\xff\xbd\xde\xef\x77\xf8"
"\x00\x55\x48\x0d\x74\x00\x2f\x0c\x31\x8b\x66\x0c\x30\x5b\x15\x4c"
"\x71\x0c\x30\xac\x00\x00\x00\x01\x6a\xef\x77\xbb\xdd\x68\x00\x92"
"\x2a\x0f\xdc\x00\x10\x02\x08\x04\x00\x00\x00\x04\x12\x00\x00\x80"
"\x00\x20\x00\x00\x00\x00\x15\x51\x54\xaa\x55\x50\x01\x49\x50\x16"
"\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\xaa\xa8\x1d\xb8\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x49\x10\x17\xe8\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x25\x25\x48\x3d\x70\x00\x00\x00\x00\x00"
"\x02\x10\x00\x00\x00\x10\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x29\x54\xa0\x2f\xd0\x00\x00\x07\xe3\x83\x8e\x7f"
"\x00\x00\xe1\xdc\x73\xb8\x70\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\xa5\x2a\x50\x3a\xe0\x00\x00\x0b\xb3\x01\x84\x2f\x80\x00"
"\x63\x8c\x53\x18\x60\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02"
"\x94\x91\x40\x6f\xa0\x00\x00\x1c\x23\x02\x86\x31\x40\x00\x66\x06"
"\x63\x18\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\xaa\xaa"
"\xa0\x7a\xc0\x00\x00\x14\x03\x01\x86\x61\x80\x80\x65\x06\xe3\x0c"
"\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a\x44\x94\x80\x5f"
"\xc0\x00\x00\x18\x02\x83\x06\x3e\x81\xe0\x7e\x07\x82\x8d\xc0\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x2a\x4a\x40\xf5\x40\x00"
"\x00\x18\x03\x01\x8e\x3b\x01\x60\x6a\x02\xc3\x0e\x80\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xdf\x80\x00\x00\x18"
"\x03\x01\x84\x51\xc3\xd0\x6e\x01\x83\x05\x80\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x01\xf5\x80\x00\x00\x1c\x03\x01"
"\x86\x30\x81\x60\x63\x03\x03\x07\x80\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x01\x5f\x00\x00\x00\x0b\x73\xb9\xdc\x6f"
"\x80\x80\x62\x81\x82\x82\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x01\xf5\x80\x00\x00\x07\xe2\xe8\xb8\x3a\x80\x00"
"\xa1\x81\x83\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x82\x90\x50\x25\x00\x00\x41\x41"
"\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
"\x00\x00",
	3458
);

static const std::vector<QByteArray> epson_commands =
{
	QByteArray("\033E\x01"),		//    BoldOn
	QByteArray("\033E\x00", 3),		//    BoldOff
	QByteArray("\033-\x01"),		//    UnderlineOn
	QByteArray("\033-\x00", 3),		//    UnderlineOff
	QByteArray("\033-\x02"),		//    Underline2On
	QByteArray("\033-\x00", 3),		//    Underline2Off
	QByteArray("\033a\x00", 3),		//    AlignLeft
	QByteArray("\033a\x01", 3),		//    AlignCenter
	QByteArray("\033a\x02", 3),		//    AlignRight
	QByteArray("\033@"),			//    Init
	QByteArray("\035V\102\x00", 4),	//    Cut
	QByteArray("\n"),				//    Eoln
	QByteArray("\033t\x06", 3),		//    SelectCodeTable1251
	zelesta_logo
};

struct PrintData
{
	enum class Command : int {
		BoldOn = 0,
		BoldOff,
		UnderlineOn,
		UnderlineOff,
		Underline2On,
		Underline2Off,
		AlignLeft,
		AlignCenter,
		AlignRight,
		Init,
		Cut,
		Eoln,
		SelectCodeTable1251,
		ZelestaLogo,
		HorizontalLine,
		Text,
	};
	Command command;
	QByteArray data;
	int width = 0;
	Qt::Alignment alignment = Qt::AlignLeft;

	PrintData(Command cmd, const QByteArray &data = QByteArray(), int width = 0, Qt::Alignment alignment = Qt::AlignLeft)
		: command(cmd), data(data), width(width), alignment(alignment)
	{}
	bool isCommand() const {return command != Command::Text;}
	int textLength() const {return isCommand()? 0: data.length();}
	QByteArray toByteArray() const
	{
		QByteArray ret;
		switch(command) {
		case Command::BoldOn: ret += "<B>"; break;
		case Command::BoldOff: ret += "</B>"; break;
		case Command::UnderlineOn: ret += "<U>"; break;
		case Command::UnderlineOff: ret += "</U>:"; break;
		case Command::Underline2On: ret += "<u>:"; break;
		case Command::Underline2Off: ret += "</u>:"; break;
		case Command::AlignLeft: ret += "<|-->"; break;
		case Command::AlignCenter: ret += "<-|->"; break;
		case Command::AlignRight: ret += "<--|>"; break;
		case Command::Init: ret += "<INIT>"; break;
		case Command::Cut: ret += "<CUT>"; break;
		case Command::Eoln: ret += "<EOL>"; break;
		case Command::HorizontalLine: ret += "<HR>"; break;
		case Command::Text:
			if(width == 0)
				ret += data;
			else
				ret += "<" + (width < 0? "%:": QByteArray::number(width) + ":") + data + ">";
			break;
		case Command::SelectCodeTable1251:
		case Command::ZelestaLogo:
			break;
		}
		return ret;
	}
};
typedef QList<PrintData> PrintLine;

class DirectPrintContext
{
public:
	PrintLine line;
	int horizontalLayoutNestCount = 0;
};

void ReceiptsPrinter::createPrinterData_helper(const QDomElement &el, DirectPrintContext *print_context, const QString &text_encoding)
{
	PrintLine pre_commands;
	PrintLine post_commands;
	int text_width = 0;
	bool is_halign = el.tagName() == QLatin1String("div")
			&& el.attribute(qf::gui::reports::ReportProcessor::HTML_ATTRIBUTE_LAYOUT) == QLatin1String("horizontal");
	if(is_halign)
		print_context->horizontalLayoutNestCount++;
	QDomNamedNodeMap attrs = el.attributes();
	for (int i = 0; i < attrs.count(); ++i) {
		QDomAttr attr = attrs.item(i).toAttr();
		QString key = attr.name();
		if(key == QLatin1String("lpt_textWidth")) {
			QString val = attr.value();
			if(val == "%")
				text_width = -1;
			else
				text_width = val.toInt();
		}
		else if(key == QLatin1String("lpt_textStyle")) {
			QStringList styles = attr.value().split(',', SkipEmptyParts);
			for(QString s : styles) {
				s = s.trimmed();
				if(s == QLatin1String("bold")) {
					pre_commands << PrintData(PrintData::Command::BoldOn);
					post_commands.insert(0, PrintData(PrintData::Command::BoldOff));
				}
				else if(s == QLatin1String("underline")) {
					pre_commands << PrintData(PrintData::Command::UnderlineOn);
					post_commands.insert(0, PrintData(PrintData::Command::UnderlineOff));
				}
				else if(s == QLatin1String("underline2")) {
					pre_commands << PrintData(PrintData::Command::Underline2On);
					post_commands.insert(0, PrintData(PrintData::Command::Underline2Off));
				}
			}
		}
		else if(key == QLatin1String("lpt_textAlign") && el.tagName() != QLatin1String("p")) {
			QString val = attr.value();
			if(val == QLatin1String("right")) {
				pre_commands << PrintData(PrintData::Command::AlignRight);
				post_commands.insert(0, PrintData(PrintData::Command::AlignLeft));
			}
			else if(val == QLatin1String("center")) {
				pre_commands << PrintData(PrintData::Command::AlignCenter);
				post_commands.insert(0, PrintData(PrintData::Command::AlignLeft));
			}
			else if(val == QLatin1String("left")) {
				pre_commands << PrintData(PrintData::Command::AlignLeft);
				post_commands.insert(0, PrintData(PrintData::Command::AlignLeft));
			}
		}
		else if(key == QLatin1String("lpt_borderTop")) {
			QString val = attr.value();
			pre_commands << PrintData(PrintData::Command::HorizontalLine, val.toUtf8());
		}
		else if(key == QLatin1String("lpt_borderBottom")) {
			QString val = attr.value();
			post_commands << PrintData(PrintData::Command::HorizontalLine, val.toUtf8());
		}
	}
	print_context->line << pre_commands;
	if(el.tagName() == QLatin1String("p")) {
		QString ta = el.attribute(QLatin1String("lpt_textAlign"));
		Qt::Alignment text_align = Qt::AlignLeft;
		if(ta == QLatin1String("right"))
			text_align = Qt::AlignRight;
		else if(ta == QLatin1String("center"))
			text_align = Qt::AlignHCenter;
		QByteArray text = encodeText(el.text(), text_encoding);
		print_context->line << PrintData(PrintData::Command::Text, text, text_width, text_align);
	}
	{
		for(QDomElement el1 = el.firstChildElement(); !el1.isNull(); ) {
			createPrinterData_helper(el1, print_context, text_encoding);
			el1 = el1.nextSiblingElement();
			if(!el1.isNull()) {
				//if(!is_halign || (is_halign && print_context->horizontalLayoutNestCount == 1)) {
				if(!is_halign) {
					print_context->line << PrintData(PrintData::Command::Eoln);
				}
			}
		}
	}
	print_context->line << post_commands;
	if(is_halign)
		print_context->horizontalLayoutNestCount--;
}

QByteArray ReceiptsPrinter::encodeText(const QString text, const QString &text_encoding) const
{
#if QT_VERSION_MAJOR >= 6
	auto ba = text_encoding.toUtf8();
	auto enc = QStringConverter::encodingForName(ba.constData());
	if(enc) {
		auto from_utf16 = QStringEncoder(enc.value());
		return from_utf16(text);
	}
	return qf::core::Collator::toAscii7(QLocale::Czech, text, false);
#else
	QByteArray ret;
	QTextCodec *tc = nullptr;
	if(text_encoding != QLatin1String("ASCII7")) {
		QByteArray ba = text_encoding.toUtf8();
		tc = QTextCodec::codecForName(ba);
	}
	if(tc)
		ret = tc->fromUnicode(text);
	else
		ret = qf::core::Collator::toAscii7(QLocale::Czech, text, false);
	return ret;
#endif
}

namespace {
QList<PrintLine> alignPrinterData(DirectPrintContext *print_context, const ReceiptsSettings &receipts_settings)
{
	QList<PrintLine> ret;
	int line_length = receipts_settings.characterPrinterLineLength();
	PrintLine line;
	{
		line << PrintData(PrintData::Command::Init) << PrintData(PrintData::Command::ZelestaLogo);
		ret.insert(ret.length(), line);

		const auto & text_encoding = receipts_settings.characterPrinterCodec();
		if (text_encoding == QLatin1String("cp1251")) {
			ret.insert(ret.length(), PrintLine{} << PrintData(PrintData::Command::SelectCodeTable1251));
		}
	}
	line.clear();
	for (int i = 0; i < print_context->line.count(); ++i) {
		const PrintData &pd = print_context->line[i];
		bool is_eol = (pd.command == PrintData::Command::Eoln) || (i == (print_context->line.count() - 1));
		if(pd.command != PrintData::Command::Eoln) {
			line << pd;
		}
		if(is_eol) {
			int fixed_text_len = 0;
			int spring_cnt = 0;
			for (const auto &pd2 : line) {
				if(pd2.width < 0)
					spring_cnt++;
				else if(pd2.width > 0)
					fixed_text_len += pd2.width;
				else
					fixed_text_len += pd2.textLength();
			}
			for (auto &pd2 : line) {
				if(pd2.isCommand())
					continue;
				int w = pd2.width;
				if(w < 0)
					w = (line_length - fixed_text_len) / spring_cnt;
				if(w > 0) {
					int w_rest = w - pd2.textLength();
					if(w_rest > 0) {
						if(pd2.alignment == Qt::AlignLeft)
							pd2.data = pd2.data + QByteArray(w_rest, ' ');
						else if(pd2.alignment == Qt::AlignRight)
							pd2.data = QByteArray(w_rest, ' ') + pd2.data;
						else if(pd2.alignment == Qt::AlignHCenter)
							pd2.data = QByteArray((w_rest/2) + 1, ' ') + pd2.data + QByteArray(w_rest/2 + 1, ' ');
					}
					pd2.data = pd2.data.mid(0, w);
					pd2.width = 0;
				}
			}
			ret.insert(ret.length(), line);
			line.clear();
		}
	}

	{
		line.clear();
		line << PrintData(PrintData::Command::Eoln) << PrintData(PrintData::Command::Cut);
		ret.insert(ret.length(), line);
	}
	return ret;
}

QList<QByteArray> interpretControlCodes(const QList<PrintLine> &lines, const ReceiptsSettings &receipts_settings)
{
	QList<QByteArray> ret;
	int line_length = receipts_settings.characterPrinterLineLength();
	bool include_escapes = receipts_settings.isCharacterPrinterGenerateControlCodes();
	for(const PrintLine& line : lines) {
		QByteArray ba;
		int line_text_len = 0;
		for(const PrintData &pd : line) {
			if(pd.command == PrintData::Command::Text) {
				ba += pd.data;
				line_text_len += pd.data.length();
			}
			else if(pd.command == PrintData::Command::HorizontalLine) {
				QByteArray hr_data(line_length, pd.data[0]);
				if(line_text_len == 0) {
					ret.insert(ret.length(), ba + hr_data);
					ba.clear();
				}
				else {
					ret.insert(ret.length(), ba);
					ba = hr_data;
					line_text_len = hr_data.length();
				}
			}
			else if(include_escapes) {
				auto ix = (size_t)pd.command;
				QF_ASSERT(ix < epson_commands.size(), QString("%1 - Bad command index!").arg(ix), continue);
				ba += epson_commands[ix];
			}
		}
		ret.insert(ret.length(), ba);
	}
	return ret;
}
}

QList<QByteArray> ReceiptsPrinter::createPrinterData(const QDomElement &body, const ReceiptsSettings &receipts_settings)
{
	DirectPrintContext dpc;
	//dpc.printerLineWidth = printer_options.characterPrinterLineLength();
	createPrinterData_helper(body, &dpc, receipts_settings.characterPrinterCodec());
	/*
	{
		QByteArray ba;
		for(auto d : dpc.line)
			ba += d.toByteArray();
		qfInfo() << ba;
	}
	*/
	QList<PrintLine> lines = alignPrinterData(&dpc, receipts_settings);
#if 0
	for(auto l : lines) {
		QByteArray ba;
		for(auto d : l)
			ba += d.toByteArray();
		qfDebug() << ba;
	}
#endif
	QList<QByteArray> ret = interpretControlCodes(lines, receipts_settings);
	//for(auto ba : ret) {
	//	qDebug() << ba;
	//}
	return ret;
}

