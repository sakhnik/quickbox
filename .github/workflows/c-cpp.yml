
name: Build
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  QT_VERSION: '5.15.2'

jobs:
  build_linux:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        cache: 'true'
        version: ${{ env.QT_VERSION }}
        host: 'linux'

    - name: Get app version
      run: |
        echo "VERSION=`grep APP_VERSION quickevent/app/quickevent/src/appversion.h | cut -d\\" -f2`" >> $GITHUB_ENV

    - name: Install fuse
      run: sudo apt-get install -y libfuse-dev
  
    - name: Get AppImageTool
      run: |
        curl --silent "https://api.github.com/repos/AppImage/AppImageKit/releases/latest" | jq -r '.assets[] | select(.name == "appimagetool-x86_64.AppImage").browser_download_url' | sudo xargs curl -L -o /opt/appimagetool-x86_64.AppImage --create-dirs --url
        sudo chmod +x /opt/appimagetool-x86_64.AppImage

    - name: Build AppImage
      run: |
        mkdir ./build
        ./quickevent/make-dist.sh --src-dir . --qt-dir ${Qt5_DIR} --work-dir ./build --appimage-tool /opt/appimagetool-x86_64.AppImage 

    - name: Save AppImage
      uses: actions/upload-artifact@v3
      with:
        name: quickevent-${{ env.VERSION }}-linux64.Appimage
        path: build/artifacts/quickevent-*-linux64.AppImage

    - name: Save gzip
      uses: actions/upload-artifact@v3
      with:
        name: quickevent-${{ env.VERSION }}-linux64.tgz
        path: build/artifacts/quickevent-*-linux64.tgz


  build_windows:
    runs-on: windows-2019
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Cache Libs
      id: cache-libs
      uses: actions/cache@v3
      with:
        path: |
          C:/openssl/bin/libssl-1_1-x64.dll
          C:/openssl/bin/libcrypto-1_1-x64.dll
          C:/Program Files/PostgreSQL/14/bin/libiconv-2.dll
          C:/Program Files/PostgreSQL/14/bin/libintl-9.dll
          C:/Program Files/PostgreSQL/14/bin/liblz4.dll
          C:/Program Files/PostgreSQL/14/bin/zlib1.dll
          C:/Program Files/PostgreSQL/14/bin/libpq.dll
        key: ${{ runner.os }}-Libraries

    - name: Get OpenSSL and PostgreSQL libraries
      if: steps.cache-libs.outputs.cache-hit != 'true'
      run: |
        choco install openssl.light --params "/InstallDir:C:\openssl" --version 1.1.1 -y
        choco install postgresql14 --version 14.5.1 -y
      shell: cmd

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        cache: 'true'
        version: ${{ env.QT_VERSION }}
        host: 'windows'
        arch: 'win64_mingw81'

    - name: Build
      run: |
        qmake.exe quickbox.pro -spec win32-g++ "CONFIG+=release" "GITHUB_ACTIONS=TRUE"
        mingw32-make.exe qmake_all
        mingw32-make.exe -j4
      shell: cmd

    - name: Get app version
      run: echo "VERSION=`grep APP_VERSION quickevent/app/quickevent/src/appversion.h | cut -d\\" -f2`" >> $GITHUB_ENV

    - name: Create installer
      run: |
        choco install innosetup --no-progress
        "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "/DVERSION=%VERSION%" "/DQT_DIR=%Qt5_Dir%" "/DPSQL_DIR=C:/Program Files/PostgreSQL/14" "/DSSL_DIR=C:\openssl\bin" quickevent/quickevent.iss
      shell: cmd

    - name: Save setup
      uses: actions/upload-artifact@v3
      with:
        name: quickevent-${{ env.VERSION }}-win64-setup.exe
        path: _inno\quickevent\quickevent-${{ env.VERSION }}-win64-setup.exe
